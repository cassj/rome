\subsubsection{Parsers}
\label{sec:controller_parsers}

\paragraph{}
Parsing is the process of turning data from one format to another. In the specific context of ROME, this means the process of turning uploaded files into some format that ROME can recognise (an .RData file of some sort) and registering them with the ROME database. Datafiles cannot exist outside of an experiment, so parsing takes place in the context of the currently selected experiment. A parsed file will be a root datafile - it does not have any parent datafiles within ROME. A single experiment may have multiple root datafiles. 

\paragraph*{}
The core controller responsible for parsing data is \texttt{lib/ROME/Controller/Parser/Base.pm}. This doesn't actually contain any code for parsing data, that is left to its subclasses. It does contain the global \verb|parse| action, which checks what parsers are installed (anything in the \texttt{ROME::Controller::Parser::*} namespace, other than Base) and passes them to the template defined in \texttt{root/src/parse/form.tt2}. This template defines a form with a select input from which the user can choose the appropriate parser for the data they are using. 

\paragraph*{}
The select parser form submits via an AJAX call to the \texttt{list\_files} action in the Parser::Base controller. This sets the selected parser for the session then returns a second form comprising checkboxes for each of the files in the current user's upload directory which that parser is capable of processing (as defined by a File::Find::Rule in the parser controller). 

\paragraph*{}
The file select form submits to the parse action again. When there are files selected, rather than simply returning the form, the parse action forwards to its \texttt{parse\_files} action, which runs some validation tests on the filenames, then forwards to the \texttt{\_parse\_files} action in the currently selected parser subclass. This action creates an R process to generate the root datafile.

\paragraph{Metadata}

\paragraph{}
Some parsers may need more information from the user in order to complete the parsing process. For example creating an AffyBatch object from a set of .CEL files 