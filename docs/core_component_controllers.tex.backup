\subsubsection{Core Componenent Controllers}
\label{sec:core_component_controllers}

\paragraph{}
Table \ref{tab:core_component_controllers} lists all of the controllers which make up the core of ROME. These provide the basic functionality of the framwork as described in more detail in the remainder of this section. In all cases, more information on the actions and their usage can be found in the perldoc for the controller in question.

\begin{table}
\caption{Core Component Controllers}
\label{tab:core_component_controllers}
\begin{footnotesize}
\begin{tabular}{ll}
User\\
Workgroup\\
Experiment\\
Upload\\
Parser\\
Metadata\\
Datafile\\
Devel\\
Admin\\
\end{tabular}
\end{footnotesize}
\end{table}

\paragraph{User}

\paragraph{}
The User controller is responsible for managing user registration, login and logout and account details. Its public actions are:

\begin{verbatim}
user/login
user/logout
user/register
user/user_confirm
user/admin_confirm
user/reset_password
user/lost_password
user/account
user/account/update
user/lost_password
user/reset_password
user/set_experiment
\end{verbatim}

\paragraph{}
Registration has configuration settings in the rome.yml configuration file which determine whether or not confirmation (via email) is required for both the user and the administrator:

\begin{verbatim}
registration:
    user_confirm: '1'
    admin_confirm: '1'
\end{verbatim}


\paragraph{Workgroup}
\paragraph{}
Workgroup provides the functionality for workgroup management. Workgroups can be searched and listed. Users can request to join a workgroup or leave a group to which they belong and they may create workgroups of their own. Owners of workgroups can manage that group, inviting users to join, approving or denying requests to join, removing users from the group and so on. Its public actions are:

\begin{verbatim}
workgroup
workgroup/autocomplete_leader
workgroup/add
workgroup/list_user_workgroups
workgroup/delete
workgroup/search
workgroup/update_form
workgroup/update
workgroup/manage
workgroup/pending_joins
workgroup/autocomplete
workgroup/join
wokrgroup/confirm_join
workgroup/deny_join
workgroup/invite
workgroup/confirm_invite
workgroup/deny_invite
workgroup/pending_invites
workgroup/leave
workgroup/remove
workgroup/members_autocomplete
workgroup/users_autocomplete
\end{verbatim}

\paragraph{}
The index action matches the url ../workgroup and returns the main workgroup page

\paragraph{Experiment}
\paragraph{}
The Experiment controller provides the functionality for creating, managing, sharing and deleting experiments.

\begin{verbatim}
experiment/
experiment/add
experiment/delete
experiment/search_like
experiment/update_form
experiment/update
experiment/autocomplete
experiment/autocomplete_owner
experiment/share_with_all
experiment/share_with_workgroup
experiment/current
\end{verbatim}

\paragraph{}
The index action, mapping to /experiment, passes the main page template to the view. The add, delete and update actions are ajax actions (with self-explanatory functions). Only users with administrator privileges may create, delete or update experiments for users other than themselves. 

\paragraph{}
The search\_like action takes a string as a parameter and searches for experiment names that match that string. It only returns experiments to which the current user has permissions (their own, those shared with workgroups to which they belong, those made public). It also takes a 'which' parameter that determines whether to return only the user's own experiments or all those to which they have access (defaulting to just their own). It then hands the list template to the view which provides a formatted list of experiments with links to operations that can be performed on them (as described further in section \ref{sec:view} on the experiment views). The search\_like action can also be used to generate a complete list of experiments (subject to user permissions and the 'which' parameter) by passing it an empty string. The autocomplete action takes a string as a parameter and retrieves any of the experiments to which the user has access whose names contain that string. It then passes a template to the view which can format this list appropriately for a prototype.js autocompleted form field. Similarly the autocomplete\_owner action returns a suitably formatted list of users. 

\paragraph{}
Experiments can be made public or shared with workgroups. Only the owner of an experiment (or an administrator) may share it. The share\_all and share\_with\_workgroup actions provide this functionality. 
The current action just forwards to the view with the template for displaying the details of the currently selected experiment (as described in section \ref{sec:view}) 


\paragraph{Upload}
\paragraph{}
The upload controller provides support for uploading datafiles into the user's upload directory. It also provides the required actions for managing the upload directory including listing its contents and deleting files or subdirectories. It's public actions are:

\begin{verbatim}
upload
upload/autocomplete_subdir
upload/list
upload/delete
\end{verbatim}


\paragraph{}
As many of the files required for \-omics analysis are large, the upload module allows the used to upload a tarball or zip file and have it unpacked into their user directory (non-compressed files can also be uploaded). 

\paragraph{}
The UploadProgress Catalyst Plugin provides the AJAX upload-status bar functionality. In order to work this requires a forking server. Under the test server this can be acheived with:

\begin{verbatim}
  script/rome_server.pl -fork 
\end{verbatim}

\paragraph{Parser}
\paragraph{}
Parsing is the process of turning data from one format to another. In the specific context of ROME, this means the process of turning uploaded files into an .RData file. Datafiles cannot exist outside of an experiment, so parsing takes place in the context of the currently selected experiment. New datafiles become root datafiles in the currently selected experiment.

\paragraph*{}
In fact, the Parser controller itself does not contain the parsing code. Code for parsing specific filetypes into specific ROME datatypes resides in subclasses of the Parser class. For example, Parser::AffymetrixExpression generates an AffyBatch from Affymetrix .CEL files. This all occurs behind the scenes and only the actions in the base Parser class are public. They are as follows:

\begin{verbatim}
parse/
parse/set_parser
parse/parse_files
\end{verbatim}

\paragraph{}
The index action, which maps to \texttt{../parse} retreives a list of installed parsers and passes this on to the view that generates the main parser page. Parser subclasses have a valid\_files method which can return a list of the files in the upload directory that they are capable of parsing. The set\_parser method stores the given parser in the user's session from where it is retrieved when parse\_files is called.


\paragraph{Metadata}

\paragraph{}
The Metadata controller provides the functionality for managing factors and continuous variables relating to an experiment. 

\begin{verbatim}
metadata/ 
metadata/owner_autocomplete
metadata/factor/add
metadata/factor/add_to_experiment
metadata/level/add
metadata/factor/create_form
metadata/factor/autocomplete
metadata/factor/list
metadata/factor/delete
metadata/factor/delete_from_experiment
metadata/factor/share_with_all
metadata/factor/share_with_workgroup
metadata/cont_var/add
metadata/cont_var/add_to_experiment
metadata/cont_var/create_form
metadata/cont_var/autocomplete
metadata/cont_var/list
metadata/cont_var/delete
metadata/cont_var/delete_from_experiments
metadata/cont_var/share_all
metadata/cont_var/share_with_workgroup
\end{verbatim}

\paragraph{}
The index action passes the main metadata template to the view. The create\_form and list actions just pass the appropriate template to the view, as described in section \ref{sec:view}. The various autocomplete actions return lists of factors, continuous variables or users formatted for prototype.js autocomplete form fields. All the remaining actions are ajax actions which provide functionality which for the most part is self-explanatory. The add and delete actions add and delete new factors, levels and continuous variables. Levels belong to a given factor. Factors and variables have to belong to at least one experiment and by default they are added to the currently selected experiment when they are created. The add\_to\_experiment and delete\_from\_experiment actions remove the factor or variable from the experiment but leave them in the database. Factors and continuous variables may be made public or shared with workgroups similarly to experiments. Given that the factors and variables belonging to an experiment may not be owned by the owner of that experiment (and therefore cannot have their permissions altered by that user), an experiment may only be shared with the lowest permissions of any associated factors or variables. 

\paragraph{Datafile}
\paragraph{}
The datafile controller provides functionality for managing the datafiles in an experiment. It's public actions are:

\begin{verbatim}
datafile/
datafile/select
datafile/selected
datafile/graph
datafile/png
datafile/imap
datafile/delete
\end{verbatim}

\paragraph{}
Datafiles are only created by ROME processes so there is no create action, but they can be deleted. Deleting a datafile will remove any datafiles derived from it and any pending jobs using that datafile as an input. Shared datafiles cannot be deleted, so deletion will fail if either the datafile or any of its descendants are shared.

\paragraph{}
The parent-child relationships between datafiles form a directed acyclic graph. The graph action are is to generate a GraphViz graph of the datafiles and their relationships. The png and imap actions are used to pass that graph through to the ROME::View::DatafileGraph view to generate a clickable PNG image of the graph.

\paragraph{Devel}
\paragraph{}
The Devel component provides developer tools for generating new components and processes. All of the actions in this controller require the 'dev' role.

\begin{verbatim}
devel/components
devel/component/current
devel/component/create
devel/component/select
devel/component/update
devel/component/autocomplete
devel/process/create
devel/process/delete
devel/process/form
devel/process/accepts_form
devel/process/creates_form
devel/process/autocomplete
devel/process/add_accepts
devel/process/add_creates
devel/process/delete_accepts
devel/process/delete_creates
devel/datatype/autocomplete
devel/datatype/description_autocomplete
devel/datatypes
devel/datatype/current
devel/datatype/create
devel/datatype/delete
devel/datatype/update
devel/datatype/select
devel/component/distribution
\end{verbatim}

\paragraph{}
The devel/components and devel/datatypes actions forward page templates to the view. The various form methods are expected to be called via AJAX and pass the required form temlate on to the view. Most of the other actions provide functionality to creat, select, updat and delete components. Processes can be added to and deleted from the selected component. Datatypes a process accepts and creates can be added to and deleted from a process. Parameters can be added to a process via an uploaded HTML::FormFu configuration file. The process template file that will be used to generate the R script can be uploaded and checked against the values defined for accepted datatypes, created datatypes and parameters. 

\paragraph{}
The devel/component/distribution action generates a package file from the selected component (stored in the components folder of the ROME root directory) that is installable using the Admin controller described below.


\paragraph{Admin}
\paragraph{}
The admin controller provides various support actions for a ROME administrator. All of the actions in this controller require the 'admin' role.

\begin{verbatim}
admin/
admin/component/select
admin/component/install_form
admin/component/install
admin/component/rollback_form
admin/component/rollback
admin/component/delete 
\end{verbatim}

\paragraph{}
The index action passes the admin page template to the view. Installing components requires that the package file be uploaded into the admin upload directory in order that the install\_form can locate it. The installable package (as generated by the Devel controller described above) provides all the necessary files for the component and its processes and also all the necessary information to enter the component, process and datatypes into the ROME database. Deletion of a component will fail if any of its processes have been used to create extant datafiles or if there are any jobs queued for any of its processors. 

\paragraph{}
Components have version numbers. All installed component packages are backed up in the components directory so if a newly installed comopnent fails component/rollback provides the capacity to rollback to any of the versions of that component previously installed.