\chapter{Installation and Configuration of ROME}
\label{sec:install}
\subsubsection{Getting ROME}
ROME is currently available for linux and the most recent version can be downloaded from \url{http://bionformatics.essex.ac.uk/ROME_downloads} as a tarball. Currently there is no installation script (though this is planned for the future) but the basic installation procedure is realtively simple to perform by hand.

\subsubsection{Database}
The SQL files supplied have been tested on MySQL. Sourcing ROME/sql/rome01.sql will create an empty database. rome02.sql creates the core tables and rome03.sql will generate some initial test data. Typically, a mySQL user should be created for ROME and granted access to the database (rome\_grant.sql provides example SQL to do this).




\subsubsection{R/Bioconductor}

\paragraph{}
Install the most recent version of R from \url{http://www.r-project.org}. It is up to the administrator whether to install the stable or development versions. The Bioconductor install script automatically installs the appropriate versions of Bioconductor packages. R installation should just be a case of downloading the .tgz file, unpacking it somewhere and running: 

\begin{verbatim}
./configure --enable-R-shlib
make 
\end{verbatim}

\paragraph{}
The default set of packages installed with getBioC includes tkWidgets, which will require tcl on the system. This isn't necessary for ROME, but if desired the tcl/tk packages should be installed before configuring R.

\paragraph{}
Optionally, R can be installed to a system-wide location (by default to /usr/local, an alternative location can be specified as an argument to configure), or it can be run from its current location (.../bin/R).

\begin{verbatim}
sudo make install
\end{verbatim}


\paragraph{}
The easiest way to install Bioconductor packages is to start R (ensuring the current user has write access to the R library directory) and using the Bioconductor installation script
\begin{verbatim}
> source("http://www.bioconductor.org/biocLite.R")
> biocLite()
\end{verbatim}

\paragraph{}
R is able to automatically install Bioconductor metadata packages at a later date, as required, however this requires  write priviledges to the R library directory. User input from the web interface should be validated by ROME and should never be directly inserted into an R script for running, so it should be reasonably safe to allow such permission to the user under which ROME is running, however it is also possible to install all of the metadata packages to begin with and allow R to be run without write permissions. It is worth noting that this is a time consuming process.

\begin{verbatim}
> biocContribUrl <- sapply(Biobase::biocReposList(), contrib.url)
> biocPkgs <- available.packages(biocContribUrl)
> biocLite(pkgs=biocPkgs)
\end{verbatim}


\subsubsection{rome.yml}
Configuration of ROME is done in the YAML file rome.yml. The following changes should be made to suit the local configuration:

1. Alter the root path to correspond to the location of the ROME/root directory, for example:

\begin{verbatim}
root: /srv/www/ROME/root
 \end{verbatim}

2. Alter the connection details for the database. The default database name is rome. This can be changed, but will require an appropriate change to both the name field and the connect\_info dbi:mysql:* field. 

\begin{verbatim}
###
# Database connection details 
###
Model::ROMEDB:
  schema_class: ROMEDB
  name: rome
  connect_info:
    - dbi:mysql:rome
    - 'rome_user'                    # this is your database username
    - 'rome_password'                # this is your database password
    - AutoCommit: 1
\end{verbatim}

3. Set admin\_email 

\begin{verbatim}
admin_email: 'foo@bar.ac.uk'
\end{verbatim}

4. Set the userdata directory. This should give the full path to the directory, which can be anywhere. The datafile directory can get very large (though an individual user can have storage limits and an overall user limit can be set).

\begin{verbatim}
userdata: '/home/cass/work/ROME/userdata'
\end{verbatim}


5. Change the locations of the R exectuable and whatever mail agent is in use:

\begin{verbatim}
R: '/usr/bin/X11/R'
sendmail: '/usr/sbin/postfix'
\end{verbatim}

\paragraph{}
6. Under Registration, set user\_confirm to 1 if users should be asked to confirm their registration by email (which ensures that the person registering is actually the owner of the email address). Set admin\_confirm to 1 if all registrations should be confirmed by the administrator. Set these values to 0 to disable email checking.

\begin{verbatim}
registration:
    user_confirm: '1'
    admin_confirm: '1'
\end{verbatim}

\subsubsection{Condor}

\paragraph{}
If you want to use ROME with an existing Condor cluster, you just need to alter the \texttt{rome.yml} configuration file \texttt{condor} section appropriately. If you don't have access to a Condor cluster, or you would like to test ROME on a local, single machine installation of Condor before trying it on a cluster, the most recent version can be downloaded from \url{http://www.cs.wisc.edu/condor/}. At the time of writing, ROME has been tested with the development version 7.1.0. It is important to get the version linked against the right version of glibc if you want the standard universe to work.
Having downloaded the appropriate version, run the condor installation script \texttt{/condor_configure --install --make-personal-condor}.

\subsubsection{Perl, Catalyst}

\paragraph{}
With a recent version of perl (5.8.1+), a configured CPAN.pm and Module::Build installed, make and a compiler (all of which should come with any recent linux distibution) then the Catalyst installation script should work. This can be downloaded from \url{http://www.shadowcatsystems.co.uk/static/cat-install}. Run the script as follows:

\begin{verbatim}
chmod 755 cat-install
sudo perl cat-install
\end{verbatim}

\paragraph{}
This should install all the core catalyst dependencies. It was tested on a vanilla perl install on Ubuntu Feisty with no problems. If problems arise, help can be found on the Catalyst developer site at \url{http://dev.catalystframework.org}

\paragraph{}
Install the development modules from catalyst (just accept the defaults for installing dependencies):

\begin{verbatim}
sudo perl -MCPAN -e 'install Catalyst::Devel' 
\end{verbatim}

\paragraph{}
ROME also requires a number of Catalyst plugin modules:

\begin{verbatim}
sudo perl -MCPAN -e shell
install Catalyst::Plugin::UploadProgress
install Catalyst::Plugin::Prototype
install Catalyst::Plugin::Server::XMLRPC
install Catalyst::Plugin::FillInForm
install Catalyst::Plugin::FormValidator
install Catalyst::Plugin::RequireSSL
install Catalyst::Plugin::Session::State::Cookie
install Catalyst::Plugin::Session::Store::FastMmap
install Catalyst::Plugin::Authorization::Roles
install Catalyst::Plugin::Authentication::Store::DBIC
install Catalyst::Plugin::Cache::FastMmap
install Catalyst::Plugin::StackTrace
install Catalyst::View::TT
install File::Find::Rule
install MIME::Lite::TT::HTML
\end{verbatim}


\subsubsection{Getting Started}

\paragraph{}
Create an admin user by running

\begin{verbatim}
perl script/rome_adminuser.pl 
\end{verbatim}

\paragraph{}
ROME can now be run on its lightweight test server by running (from your ROME directory):

\begin{verbatim}
perl script/rome_server.pl
\end{verbatim}

\paragraph{}
The server runs on port 3000 by default, so point a browser (Firefox preferably as ROME is yet to be extensively tested on IE) at:

\begin{verbatim}
http://localhost:3000
\end{verbatim}

\paragraph{}
This should display the login page.  By default, the administrator account is admin, with password admin. The password can be changed in My Account > Reset Password. Administrator priviledges may be given to other user names later, if required. The email address for the account will be the one specified in admin\_email in the config file. Having created an admin user, logout and register as a normal user. Depending on the configuration, this might require checking and responding to confirmation emails.



\subsubsection{ROME Navigation}
\paragraph{}
The ROME navigation menu is configurable via the file \texttt{nav.yml}. The menu is actually implemented in HTML as a nested list of links, but there are complications as it is styled to grey-out components which cannot be run on the currently selected datafile type. Writing these nested lists by hand is prone to error, so the script \texttt{script/rome\_make\_nav.pl} automatically generates them from the YAML file. The structure should be reasonably self-explanatory, as illustrated for the start menu below. The urls should be relative. The any\_datatype entry simply turns off ROME's datatype checking, allowing this menu entry to be accessed regardless of the currently selected datatype and is not generally wanted for analysis components. The display\_name is the text seen in the menu, the title is a longer description which will appear on mouse over.

\begin{verbatim}
- Start Here:
    title: Start here
    dropdown:
      - login:
          display_name: Login
          title: Login to ROME
          href: /user/login
          any_datatype: 1
      - logout:
          display_name: Logout
          title: End your ROME session
          href: /user/logout
          any_datatype: 1
      - register:
          display_name: Register
          title: Create a ROME account
          href: /user/register
          any_datatype: 1
      - lost_password:
          display_name: Lost Password?
          title: Request a new password by email
          href: /user/lost_password
          any_datatype: 1
\end{verbatim}




\subsubsection{Running under Apache}
\label{sec:server_setup}
% \subsection{rome\_server.pl}
% \subsection{Apache}
