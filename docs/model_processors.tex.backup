\subsubsection{Processes}
\label{sec:processes}
\paragraph{}
A single process corresponds to a single script template. The location of the template files is determined by the config file (\texttt{rome.yml}) \texttt{process\_templates} setting (by default the process\_templates directory in the ROME home directory). Each process is stored in the database in the \texttt{process} table. A process entry contains the name and a brief description of the process, the name of the template file (relative to the template directory) and the appropriate processor class (relative to ROME::Processor::). Processes have associated \texttt{parameters} defined in the \texttt{parameter} table. Datatypes of the input datafiles this process expects and the datafiles this process produces are held in the \texttt{process\_accepts} and \texttt{process\_creates} tables.
% Parameter constraints are defined (when the process is installed) in the database \texttt{parameter\_constraint} table as perl subroutine references and serialized to the database using the Storable.pm freeze method. 

\subsubsection{Processors}
\label{sec:processors}
\paragraph{}
A processor is a perl module which can generate scripts at runtime from a template with user-defined / ROME-generated input and run that script. There is no database table for Processors, ROME automatically registers anything under the ROME::Processor:: namespace as an installed processor. Processors are discussed in more detail in the context of ROME Controllers in section \ref{sec:processors}.

\subsubsection{Jobs}
\label{sec:jobs}
\paragraph{}
Processors are able to create jobs from a process and queue them to be run. The queue is implemented in the database table \texttt{queue} which holds (among other things) the ID of the job and its current status. Once the job is run, it also holds information about when the job started running and where. Jobs are run by a job scheduler, something discussed in more detail in section \ref{sec:job_scheduling}





