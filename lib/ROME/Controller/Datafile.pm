package ROME::Controller::Datafile;

use strict;
use warnings;
use base 'ROME::Controller::Base';
use ROME::Constraints;

=head1 NAME

ROME::Controller::Datafile - Catalyst Controller

=head1 DESCRIPTION

Catalyst Controller.

=head1 METHODS

=cut


=head2 index 

   matches /datafile
   
   Returns an admin GUI 

=cut

sub index : Private{
  my ($self, $c) = @_;
  
  #return an admin GUI page 
  $c->stash->{template} = 'datafile/admin'; 

}

=head2 selected

    matches /datafile/selected 

    Ajax method which returns just the selected_datafiles list for 
    the current user.
=cut

sub selected : Local {
    my ($self,$c) = @_;
    $c->stash->{ajax} = 1;
    $c->stash->{template} = 'datafile/selected_datafiles';
}

=head2 graph 

  matches /datafile/graph

  returns a png graph of the datafiles as generated by Graphviz
  overlaid with a clickable image map for selecting the datafiles.

=cut
sub graph : Local {
  my ($self, $c) = @_;
  
  $c->stash->{ajax} = 1;
  
  #get the imagemap content
  $c->stash->{html_imagemap} = $c->subreq("/datafile/imap");

  #graphviz will add hrefs to nodes, but we need ajax links to datafile/select
  #javascript for datafile_updater in rome.js
  $c->stash->{html_imagemap} =~ s/href=\"(.+?)\"/href=\"$1\" onclick=\"return datafile_updater(\'$1\')\"/g;

  #Reset content type
  $c->response->content_type("text/html");

  #and send to the view
  $c->stash->{template} = 'datafile/list_datafiles';

}

# Generates the png rendering of the datafiles in this
# experiment
sub png : Local{
  my ($self, $c) = @_;
  $c->stash->{graphview}->{view} = 'ROME::View::DatafileGraph';
  $c->stash->{graphview}->{object} = $c->user->experiment;
  $c->stash->{graphview}->{format} = "png";
  $c->forward('ROME::View::DatafileGraph');
}



# Generates an imagemap of the datafiles in this
# experiment 
sub imap : Local{
  my ($self, $c) = @_;
  
  #which will use a graphviz view
  $c->stash->{graphview}->{view} = 'ROME::View::DatafileGraph';
  
  #to draw an image map grap of the datafiles in the current experiment
  $c->stash->{graphview}->{object} = $c->user->experiment;
  $c->stash->{graphviz}->{format} = "cmapx";
  
}
    

=head2 select
    
    matches datafile/select
    expects parameters experiment_name, experiment_owner, datafile_name

    sets the specified datafile as selected, or deselcts it if it's already selected.

=cut
sub select :Local {

  my ($self,$c, $expt_name, $expt_owner, $df_name) = @_;
  $c->stash->{template} ='site/messages';
  $c->stash->{ajax} = 1;

  $c->request->params->{experiment_name} = $expt_name if $expt_name;
  $c->request->params->{experiment_owner} = $expt_owner if $expt_owner;
  $c->request->params->{datafile_name} = $df_name if $df_name;

  #do the parameter checks.
  $c->forward('_validate_select_params');
  if ($c->form->has_invalid or $c->form->has_missing){
      return;
  }

  #retrieve the datafile
  my $datafile = $c->model('ROMEDB::Datafile')->find({
      experiment_name => $c->request->params->{experiment_name},
      experiment_owner => $c->request->params->{experiment_owner},
      name => $c->request->params->{datafile_name}
						     });
  unless ($datafile){
      $c->stash->{error_msg} = "Datafile not found in database. Contact your system administrator on ".$c->config->{admin_email};
      return;
  }
  
  #does the user have permission to select it?
  unless ($c->check_user_roles('admin') or ($datafile->experiment_owner eq $c->user->username)){
      $c->stash->{error_msg} = "You don't have permission to select that datafile";
      return;
  }
  
  #is is already selected?
  my ($user_datafile) = $c->model('ROMEDB::PersonDatafile')->search(
      {
	  person => $c->user->username,
	  datafile_name => $datafile->name,
	  datafile_experiment_name => $datafile->experiment_name,
	  datafile_experiment_owner => $datafile->experiment_owner,
      });
  
  if($user_datafile){
      $user_datafile->delete;
      $c->stash->{status_msg} = 'Deselected datafile '.$datafile->name;
  }else{
      $user_datafile = $c->model('ROMEDB::PersonDatafile')->create(
	  {
	      person => $c->user->username,
	      datafile_name => $datafile->name,
	      datafile_experiment_name => $datafile->experiment_name,
	      datafile_experiment_owner => $datafile->experiment_owner,
	  });
      if ($user_datafile){
	  $c->stash->{status_msg} = 'Selected datafile '.$datafile->name;
      }
      else{
	  $c->stash->{error_msg} = 'Failed to select datafile '.$datafile->name.' contact your system administrator on '.$c->config->{admin_email};
      }
  }
  
  return 1;
  
}


#private DFV param check
sub _validate_select_params : Private{
  my ($self, $c) = @_;

  my $dfv_profile = {
		     required => [qw(experiment_name experiment_owner datafile_name)],
		     msgs => {
			      constraints => {
					      'allowed_chars_plus'   => 'Not a valid filename',
					      'allowed_chars' => 'Invalid characters'
					     },
			      format => '%s',
			     },
		     filters => ['trim'],
		     missing_optional_valid => 1,    
		     constraint_methods => {
                                            experiment_name => [ROME::Constraints::allowed_chars],
                                            experiment_owner => [ROME::Constraints::allowed_chars],
                                            datafile_name => [ROME::Constraints::allowed_chars_plus]
					   }
		    };
  
  $c->form($dfv_profile);
}




=head2 delete_selected
 
  Matches datafile/delete_selected

  Deletes all of the selected datafiles. 

=cut

sub delete_selected :Local {
    my ($self,$c) = @_;
    
    #don't need any param checks here - we haven't got any

    $c->stash->{template} = 'messages';
    $c->stash->{ajax} = 1;
    
    foreach ($c->user->datafiles){
	$_->delete;
    }

    $c->stash->{status_msg} = 'Datafiles deleted successfully';
    return 1;
}


=head2 view 

  Matches datafile/view
  Expects parameters
  name: the datafile name
  experiment_name: the name of the experiment to which the datafile belongs
  experiment_owner: the owner of the datafile

=cut
sub view :Local{
  my ($self, $c) = @_;

  #just use the select param checks as they're the same

  $c->request->params->{datafile_name} = $c->request->params->{name};
  if($c->forward('_validate_select_params')){

    #get the datafile
    my $df = $c->model('ROMEDB::Datafile')->find
      (
       $c->request->params->{name},
       $c->request->params->{experiment_name},
       $c->request->params->{experiment_owner},
      );
    #is it pending?
    if ($df->pending){
      $c->stash->{ajax} = 1;
      $c->stash->{template} = 'site/messages';
      $c->stash->{error_msg} = 'Datafile still pending. Please try again when the job that creates this datafile is complete';
      return;
    }
    
    my $path = $df->path;
    $c->serve_static_file($path);
    return 1;
  }
  else {
    $c->stash->{ajax} = 1;
    $c->stash->{template} = 'site/messages';
  }
  return;
  
}


1;
