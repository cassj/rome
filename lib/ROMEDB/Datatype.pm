package ROMEDB::Datatype;

use base qw/DBIx::Class/;

=head1 NAME
    
    ROMEDB::Datatype
    
=head1 DESCRIPTION
    
    DBIC object representing a row in the 'datatype' table of the ROME database

    Generally R/Bioconductor classes, like expressionSet or AffyBatch
    
    For Catalyst, this is designed to be used through ROME::Model::ROMEDB.
    Offline utilities may wish to use this class directly.

=cut

__PACKAGE__->load_components(qw/PK::Auto Core/);
__PACKAGE__->table('datatype');

=head1 METHODS

=head1 SIMPLE ACCESSORS

=over 2

=item name

   Unique name for this datatype

=item description

   Optional description for this datatype.
   It is recommended that a description is supplied. 
   If this is a datatype which can be exported or displayed as an image 
   then this description is supplied to the user. 
   Where applicable, you should include information about how this datatype
   can be interpreted by the user.

=item is_image

  boolean: is this datatype an image type

=item is_export

  boolean: is this datatype an export type

=back

=cut

__PACKAGE__->add_columns(qw/name description default_blurb is_image is_export/);
__PACKAGE__->set_primary_key(qw/name/);

=head1 RELATIONSHIP ACCESSORS

=over 2 

=item process_accepts

   has_many relationship. Returns a resultset in scalar context or an array of ROMEDB::ProcessAccepts
   objects in list context.

   This is a join table. You probably don't want to use it directly.

=item process_accepts_rs

   same as process_accepts but forces the return of a result set in list context.

=item accepted_by

  Returns a resultset in scalar context or an array of ROMEDB::ProcessAccepts 
  objects in list context

  The mapping table in this case has attributes of interest, so we can't use a
  simple many_to_many over the join. 

  Instead, we return objects of the join table class (ProcessAccepts), 
  but proxy any method calls for attributes from the related process object 
  through to that object.
  See  http://dbix-class.shadowcatsystems.co.uk/index.cgi?ManyToManyWithAttributes)

=item add_to_accepted_by

  add_to method generated by accepted_by relationship
  adds a new process to the database.
  Not implemented yet

=item set_accepted_by

  set method generated by accepted_by relationship
  tells an existing process that it can accept this datatype
  Not implemented yet

=back

=cut

__PACKAGE__->has_many(process_accepts=>'ROMEDB::ProcessAccepts','datatype_name');

##got stuff of interest in mapping table, so regular many_to_many won't work.
##see http://dbix-class.shadowcatsystems.co.uk/index.cgi?ManyToManyWithAttributes
#sub accepted_by {
#  my ($self) = @_;
#  return $self->process_accepts({},{order_by=>'name', prefetch=>['accepts']});
#}

=over 2 

=item process_creates

   has_many relationship. Returns a resultset in scalar context or an array of ROMEDB::ProcessCreates
   objects in list context.

   This is a join table. You probably don't want to use it directly.

=item process_creates_rs

   same as process_creates_rs but forces the return of a result set in list context.

=item created_by

  many_to_many relationship. 
  Returns a resultset in scalar context or an array of ROMEDB::Process objects in list context

=item add_to_created_by

  add_to method generated by created_by relationship
  adds a new process to the database.

=item set_created_by

  set method generated by created_by relationship
  tells an existing process that it generates datafiles of this datatype

=back

=cut

__PACKAGE__->has_many(process_creates=>'ROMEDB::ProcessCreates','datatype_name');
#__PACKAGE__->many_to_many(created_by=>'process_creates', 'datatype');


=over 2

=item datafiles

   A has_many relationship. 
   Returns a resultset in scalar context and an array of ROMEDB::Datafile objects 
   in list context.

=item datafiles_rs

   As datafiles, but it forces return of a resultset, even in list context.

=back

=cut

__PACKAGE__->has_many(datafiles=>'ROMEDB::Datafile','datatype');


=over 2

=item datatype_relationship_children

   has_many relationship
   Returns a result set in scalar context and an array of ROMEDB::Datatype 
   objects in list context

   This is a join table. You probably don't want to use it directly

=item datatype_relationship_children_rs

   Same as datatype_relationship_children but forces return of resultset 
   in list context

=item children

   many_to_many relationship
   Returns a resultset in scalar context or an array of ROMEDB::Datatype
   objects in list context

=item add_to_children

   add_to method created by children relationship.
   adds a new Datatype to the database

=item set_children

   set method created by children relationship
   sets an existing datatype as a child of this datatype

=item datatype_relationship_parents

   has_many relationship
   Returns a result set in scalar context and an array of ROMEDB::Datatype 
   objects in list context

   This is a join table. You probably don't want to use it directly

=item datatype_relationship_parents_rs

   Same as datatype_relationship_parents but forces return of resultset
   in list context
  
=item parents

   many_to_many relationship
   Returns a resultset in scalar context or an array of ROMEDB::Datatype 
   objects in list context.

=item add_to_parents

   add_to method created by parents relationship
   adds a new datatype to the database

=item set_parents

  set method created by parents relationship
  sets an existing datatype as a parent of this datatype.

=cut

#__PACKAGE__->has_many(datatype_relationship_children=>'ROMEDB::DatatypeRelationship', 'parent');
#__PACKAGE__->many_to_many(children=>'datatype_relationship_children', 'child');
#
#__PACKAGE__->has_many(datatype_relationship_parents=>'ROMEDB::DatatypeRelationship','child');
#__PACKAGE__->many_to_many(parents=>'datatype_relationship_parents', 'parent');

=over 2

=item datatype_export_methods

   has_many relationship
   Returns a resultset in scalar context and an array of ROMEDB::DatatypeExportMethod
   objects in list context

   This is a join table. You probably don't want to use it directly.

=item datatype_export_methods_rs

   Same as datatype_export_methods but it forces return of a resultset 
   even in list context

=item export_methods

   many_to_many relationship
   Returns a resultset in scalar context and an array of ROMEDB::ExportMethod
   objects in list context.

=item add_to_export_methods

   add_to method created by export_methods relationship
   adds a new export_method to the database

=item set_export_methods

   set_ method created by export_methods relationship
   sets an existing export_method as appplicable for this datatype.


=item metadata

=cut

__PACKAGE__->has_many(metadata=>'ROMEDB::DatatypeMetadata', 'datatype_name');




=back

=cut

#__PACKAGE__->has_many(datatype_export_methods=>'ROMEDB::DatatypeExportMethod', 'datatype');
#__PACKAGE__->many_to_many(export_methods=>'datatype_export_methods', 'export_method');







 
1;
