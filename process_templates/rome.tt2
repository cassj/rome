#################################################################################
# Setup database connection.
#################################################################################
library(RMySQL);

rome.dbname        <- "[% ROMEDB.name %]";
rome.dbuser        <- "[% ROMEDB.connect_info.1 %]";
rome.dbpass        <- "[% ROMEDB.connect_info.2 %]";
con <- dbConnect(dbDriver("MySQL"), dbname = rome.dbname, user=rome.dbuser,password=rome.dbpass);

##################################################################################
# Setup some common values.
###################################################################################
rome.data.dir         <- "[% Catalyst.user.data_dir %]"
rome.upload.dir       <- "[% Catalyst.user.upload_dir %]";
rome.static.dir       <- "[% Catalyst.user.static_dir %]"
rome.username         <- "[%Catalyst.user.username%]";
rome.experiment_name  <- [% Catalyst.user.experiment.name %];


#################################################################################
# rome.file(pattern="",dir="",ext="");
# like tempfile, but with the option to define a suffix. 
# doesn't actually create the file, just gives you the name.
# 
# stick the username on to avoid name clashes in the generic static directory.
##################################################################################
rome.file<-function(user,pattern="Rfile",dir=tempdir(),ext='R')
{
 
  filenum <- 1;
  while(file.exists(paste(dir,'/',user,'_',pattern,filenum,'.',ext,sep="")))
  {
    filenum<-filenum+1;	
  } 

  return(paste(dir,'/',user, '_',pattern,filenum,'.',ext,sep=""));
}


##################################################################################
# CLASS DEFINITIONS
##################################################################################

#####
# Allow for NULLs
#####

setClassUnion("listOrNULL", c("list","NULL"));
setClassUnion("numericOrNULL", c("numeric","NULL"));
setClassUnion("characterOrNULL",c("character","NULL"));
setClassUnion("data.frameOrNULL",c("data.frame","NULL"));

#####
# Generics
#####

setGeneric("export", function(.Object, file.name="An_R-OME_Export", file.desc="An R-OME export", export.type="TDT", sep="\t", eol="\n", row.names=TRUE, col.names=TRUE, na="NA", ...) standardGeneric("export"));
setGeneric("canExportTo", function(.Object, ...) standardGeneric("canExportTo"));
setGeneric("exportMethods<-", function(.Object, value) standardGeneric("exportMethods<-"))

####
# Define export and canExportTo for exprsSet
####

setMethod("canExportTo", 
          "exprSet", 
          function(.Object, con){
          q<-'select * from export_method, datatype_export_method where datatype_export_method.datatype="exprSet" and datatype_export_method.export_method=export_method.name'
          return(dbGetQuery(con,q)$name)
});

setMethod("export", 
	  "exprSet",
          function(.Object, file.name="exprSet_export", file.desc="Text export of expression set R/Bioconductor object",  export.type="TDT", sep="\t", eol="\n", row.names=TRUE, col.names=TRUE, na="NA"){
  if(export.type=="TDT"){
  write.table(exprs(.Object), file=file.name, quote=FALSE, sep=sep, eol=eol, row.names=row.names,col.names=col.names, na=na)
  }else if(export.type=="as_is"){
   save(.Object, file=file.name);
  }else{stop("Unknown export.type. Try using canExportTo() to get a list of available types")}
})

#####
# GeneList
#####

setClass(Class="GeneList",
	 representation=representation(stat.type="character", stat="numeric", p.value="numericOrNULL", genename="character"),
);

setMethod("initialize",
	  "GeneList",
           function(.Object, stat.type, stat, p.value=NULL, genename){
              .Object@stat.type=stat.type;
              .Object@stat=stat;
              .Object@p.value=p.value;
              .Object@genename=genename;
             if(length(.Object@genename)==0) stop("no genename identifiers given");
             if(length(.Object@stat)==0) stop("can't create GeneList with no statistics");
             if(length(.Object@stat)!=length(.Object@genename)) stop("stat vector and genename vector must be of the same length");
             if(length(.Object@p.value)!=0 && length(.Object@p.value)!=length(.Object@stat)) stop("p.value vector must be the same length as the stat vector or empty");
             names(.Object@stat)<-.Object@genename;
             if(length(.Object@p.value)!=0) names(.Object@p.value)<-.Object@genename;
             return(.Object)
});

setClass(Class="GeneAnnotation",
	representation=representation(annotation.type="character", annotation="character", genename="character"),
);

setMethod("initialize",
	  "GeneAnnotation",
           function(.Object, annotation.type, annotation,  genename){
              .Object@annotation.type=annotation.type;
              .Object@annotation=annotation;
              .Object@genename=genename;
             if(length(.Object@genename)==0) stop("no genename identifiers given");
             if(length(.Object@annotation)==0) stop("can't create GeneAnnotaion with no annotation");
             if(length(.Object@annotation)!=length(.Object@genename)) stop("annotation vector and genename vector must be of the same length");
  	     names(.Object@annotation)<-.Object@genename;
             return(.Object)
});


setClass(Class="AnnotatedGeneList",
         representation=representation(genelists="list", annotations="list", genename="character"),
         validity=function(object){
	              for(i in 1:length(object@annotations)){
                        if(class(object@annotations[[i]])!="GeneAnnotation"){
                           return("annotations list contains objects which are not of class GeneAnnotation")
                        }
                        if(!(setequal(object@genename,object@annotations[[i]]@genename))) {
                            return("GeneList and GeneAnnotation genenames must be the same as the AnnotatedGeneList genename")
                        }
                      }
                      for(i in 1:length(object@genelists)){
                          if(class(object@genelists[[i]])!="GeneList"){
                            return("genelists list contains objects which are not of class GeneList")
                          }
                       if(!(setequal(object@genename,object@genelists[[i]]@genename ))){
                          return("GeneList and GeneAnnotation genenames must be the same as the AnnotatedGeneList genename")
                        }

                      }  
                      return(TRUE);
                   },

);

setMethod("initialize", 
          "AnnotatedGeneList",
          function(.Object, genelists, annotations, genename){
            .Object@genelists<-genelists
            .Object@annotations<-annotations
            .Object@genename<-genename
            .Object
          }
)

setMethod("canExportTo", 
          "GeneList", 
          function(.Object, con){
          q<-'select * from export_method, datatype_export_method where datatype_export_method.datatype="GeneList" and datatype_export_method.export_method=export_method.name'
          return(dbGetQuery(con,q)$name)
});


setAs("GeneList",
      "matrix",
      function(from){
        if(length(from@p.value)!=0){
          mat<-as.matrix(cbind(from@stat, from@p.value));
          colnames(mat)<-c(from@stat.type,paste(from@stat.type,".p.value",sep=""));
          return(mat)
        }else{
           mat<-as.matrix(from@stat);
           colnames(mat)<-from@stat.type;
           return(mat)
        }

      }      
)

setMethod("export",
          "GeneList",
          function(.Object, file.name, file.desc,  export.type, sep, eol, row.names, col.names, na  ){ 
             if(export.type=="TDT"){
#               export.type<-"txt";
               sep<-"\t";
               eol<-"\n";
             }

          if(export.type=="TDT"){
            mat<-as(.Object, "matrix");
#            if(length(.Object@p.value) != 0) mat<-cbind(mat, pval=.Object@p.value); 
            write.table(mat, file=file.name, quote=FALSE, sep=sep, eol=eol, row.names=row.names,col.names=col.names, na=na);
          }else if(export.type=="as_is"){
             save(.Object, file=file.name);
          }else stop("Unknown export.type. Try using canExportTo() to get a list of available types");
})


setMethod("canExportTo", 
          "GeneAnnotation", 
          function(.Object, con){
          q<-'select * from export_method, datatype_export_method where datatype_export_method.datatype="GeneAnnotation" and datatype_export_method.export_method=export_method.name'
          return(dbGetQuery(con,q)$name)
});


setAs("GeneAnnotation",
      "matrix",
      function(from){
         mat<-as.matrix(from@annotation);
         colnames(mat)<-from@annotation.type;
         return(mat)
      }      
)


setMethod("export",
          "GeneAnnotation",
          function(.Object, file.name, file.desc,  export.type, sep, eol, row.names, col.names, na  ){
             if(export.type=="TDT"){
#               export.type<-"txt";
               sep<-"\t";
               eol<-"\n";
             }

          if(export.type=="TDT"){
            mat<-as(.Object, "matrix");
            write.table(mat, file=file.name, quote=FALSE, sep=sep, eol=eol, row.names=row.names,col.names=col.names, na=na);
          }else if(export.type=="as_is"){
             save(.Object, file=file.name);
          }else stop("Unknown export.type. Try using canExportTo() to get a list of available types");
})


setMethod("canExportTo", 
          "AnnotatedGeneList", 
          function(.Object, con){
          q<-'select * from export_method, datatype_export_method where datatype_export_method.datatype="AnnotatedGeneList" and datatype_export_method.export_method=export_method.name'
          return(dbGetQuery(con,q)$name)
});


setAs("AnnotatedGeneList",
      "matrix",
      function(from){
        mat<-from@genename;
        for(i in 1:length(from@genelists)){
           mat<-cbind(mat, as(from@genelists[[i]], "matrix"))
        }
        for(i in 1:length(from@annotations)){
           mat<-cbind(mat,as(from@annotations[[i]], "matrix"))
        }
        return(mat)
      }      
)


setMethod("export",
	  "AnnotatedGeneList",
          function(.Object, file.name, file.desc,  export.type, sep, eol, row.names=FALSE, col.names, na ){
          if(export.type=="TDT"){
            mat<-as(.Object, "matrix");
            write.table(mat, file=file.name, quote=FALSE, sep=sep, eol=eol, row.names=row.names,col.names=col.names, na=na);
            return(mat);
          } else if(export.type=="as_is"){
            save(.Object, file=file.name);
          }
});

#################################################################################
# methods to register datafiles in the db 

###
# register_datafile etc
###

register_datafile<-function(con,id, full_path, channels=NULL ){
  
  #set path in pending datafile
  if(is.null(full_path)) stop("no full_path provided"); 
  q_full_path<-paste('update datafile set full_path="',full_path,'" where id=',id, sep="");
  dbGetQuery(con,q_full_path);

  #link the datafile to the channels used, using parental ones by default.
  if(is.null(channels)){
    q_parental_channels<-paste('select channel from datafile_channel,datafile_relationship 
                                where datafile=datafile_relationship.parent and datafile_relationship.child=',id);
    channels<-dbGetQuery(con, q_parental_channels);
    channels<-channels$channel;
  }
  for (channel in channels) {
  q_channels<-paste('insert into datafile_channel (datafile, channel) values (',
                 paste(id, channel, sep=","),
                 ');',
                 sep="");
  dbGetQuery(con, q_channels); 
  }

  #delete pending file;
  q_delete<-paste('delete from datafile_pending where id=',id);
  dbGetQuery(con,q_delete);
 
  q_newfile=paste("select * from datafile where id=",id ,sep="");
  return(dbGetQuery(con, q_newfile));

}


register_imagefile<-function(con, id, full_path, channels=NULL, src, height=NULL, width=NULL  ){
   datafile<-register_datafile(con=con,
                               id=id, 
                               full_path=full_path,
                               channels=channels);
                                 
 
   q_img<-paste('insert into image_file (id, src, height,width) values ("',
      paste(datafile$id[1], src, height, width, sep='","'),
   '");'
    );

  dbGetQuery(con, q_img);

  q_new_img<-paste('select src, height, width from image_file where id=', datafile$id[1]);
  new_img<-dbGetQuery(con, q_new_img);
  return(cbind(datafile,new_img));

}

register_exportfile<-function(con, id, full_path, channels=NULL, export_type, href){
    datafile<-register_datafile(con=con,
                                id=id, 
                                full_path=full_path,
                                channels=channels);

   q_export<-paste('insert into export_file (id, export_type, href) values ("',
       paste(datafile$id[1], export_type,  href, sep='","'),
   '");'
    );

  dbGetQuery(con, q_export);

  q_new_export<-paste('select export_type, href from export_file where id=', datafile$id[1]);
  new_export<-dbGetQuery(con, q_new_export);
  return(cbind(datafile,new_export));
}


load_datafile<-function(con,id){  
   q<-paste('select * from datafile where id=',id,sep="");
   datafile<-dbGetQuery(con,q);
   obj.name<-load(datafile$full_path);
   return(get(obj.name));

}

get_or_create_chiptype<-function(con,name,description){
   q_get<-paste('select * from chiptype where name ="',name,'"', sep="");
   q_set<-paste('insert into chiptype(name,description) values ("',
	        paste(name,description, sep='","'),'")', sep="");
   new_chiptype<-dbGetQuery(con,q_get);	

   if(!(nrow(new_chiptype))){
      dbGetQuery(con,q_set);
      new_chiptype<-dbGetQuery(con,q_get);
   }

  return(new_chiptype);
}


create_chip<-function(con,chiptype,name,description,expt){
  if(is.null(con)) stop("No connection given");
  if(is.null(chiptype)) stop("No chiptype given");
  if(is.null(expt)) stop("No experiment id given");

  q<-paste('insert into chip (chiptype,name,description,expt) values ("',
           paste(chiptype,name,description, expt, sep='","'),
           '")',  
           sep="");

   dbGetQuery(con,q);
   q_id<-'select last_insert_id() as ID;'
   last_id<-dbGetQuery(con,q_id)$ID; 
   q_get<-paste('select * from chip where id=',last_id,sep="");
   return(dbGetQuery(con,q_get));
}

create_channel<-function(con, chip, rawdatafile, name){
  if(is.null(con)) stop("No connection given");
  if(is.null(chip)) stop("No chip given");
  if(is.null(rawdatafile)) stop("No raw datafile given");

  q<-paste('insert into channel (chip,rawdatafile,name) values ("',
           paste(chip,rawdatafile,name, sep='","'),
           '")',  
           sep="");

   dbGetQuery(con,q);
   q_id<-'select last_insert_id() as ID;'
   last_id<-dbGetQuery(con,q_id)$ID; 
   q_get<-paste('select * from channel where id=',last_id,sep="");
   return(dbGetQuery(con,q_get));
}

create_datafile_channel<-function(con, datafile,channel){
   if(is.null(con)) stop("No connection given");
   if(is.null(datafile)) stop("No datafile given");
   if(is.null(channel)) stop("No channel given");
 
  q<-paste('insert into datafile_channel (datafile,channel) values ("',
           paste(datafile, channel, sep='","'),
           '")',  
           sep="");

   dbGetQuery(con,q);
   q_id<-'select last_insert_id() as ID;'
   last_id<-dbGetQuery(con,q_id)$ID; 
   q_get<-paste('select * from datafile_channel where id=',last_id,sep="");
   return(dbGetQuery(con,q_get));
}
