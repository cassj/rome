[% INCLUDE 'setup/Perl' %]

[%# ROME Variables, defined by setup/R:
   $rome_userdir
   $rome_username  
   $rome_experiment_name 

%]

[%# TT Arguments from Processor
    rome_datafiles_out
    rome_datafiles_in
%]

use Storable qw/nstore retrieve/;
use IO::File;
use Bio::PrimarySeq;

#retrieve the ensembl object
#this also requires all the relevant ensembl api libs. 
\$Storable::Eval=1;
my \$code = retrieve('[% rome_datafiles_in.ENSEMBL_OBJECT.name %]');
my (\$obj, \$obj_ad, \$registry) = &\$code;

#find out what we've got
my \$class =  ref \$obj;
my \$version = \$obj->adaptor->db->dbc->dbname;

#for padding
my (\$three, \$five);
[% IF three_prime_pad %]\$three = [% three_prime_pad %]; [% END %]
[% IF five_prime_pad %]\$five = [% five_prime_pad %]; [% END %]

\$three = 0 unless defined \$three;
\$five = 0 unless defined \$five;

my \$pseq;

if (\$class eq 'Bio::EnsEMBL::Gene'){

  #if we're on the -ve strand, swap five and three round so we extend the right distance
  # (I've checked this against sequences in ensembl and it's def. right)
  if (\$obj->strand == -1){
    (\$three, \$five) = (\$five, \$three);
  }

  #start and end posns are relative to the +ve strand of chromosome
  my \$start = \$obj->start - \$five;
  my \$end = \$obj->end + \$three;

  #retrieve a slice covering this region
  my \$slice_adap = \$registry->get_adaptor(\$obj->adaptor->db->species, 'core','slice');
  my \$slice = \$slice_adap->fetch_by_region('chromosome', \$obj->slice->seq_region_name, \$start, \$end);
  
  #swap to -ve strand if required
  \$slice->invert if \$obj->strand == -1;

  #and stick the sequence into a pseq:
  \$pseq = Bio::PrimarySeq->new(
			       -seq => \$slice->seq,
			       -primary_id => \$slice->id,
			       -object_id => \$obj->display_id,
			       -alphabet => 'dna',
			       -description => "EnsEMBL gene ".\$obj->display_id." with 5 prime padding $five and 3 prime padding $three",
			      );
}
elsif (\$class eq 'Bio::EnsEMBL::Transcript'){

  #doesn't make sense to genome pad a transcript, it's not genomic.
  \$pseq = \$obj->seq;

}
elsif (\$class eq 'Bio::EnsEMBL::Exon'){


  #if we're on the -ve strand, swap five and three round so we extend the right distance
  if (\$obj->strand == -1){
    (\$three, \$five) = (\$five, \$three);
  }

  #start and end posns are relative to the +ve strand of chromosome
  my \$start = \$obj->start - \$five;
  my \$end = \$obj->end + \$three;

  #retrieve a slice covering this region
  my \$slice_adap = \$registry->get_adaptor(\$obj->adaptor->db->species, 'core','slice');
  my \$slice = \$slice_adap->fetch_by_region('chromosome', \$obj->slice->seq_region_name, \$start, \$end);
  
  #swap to -ve strand if required
  \$slice->invert if \$obj->strand == -1;

  #and stick the sequence into a pseq:
  \$pseq = Bio::PrimarySeq->new(
			       -seq => \$slice->seq,
			       -primary_id => \$slice->id,
			       -object_id => \$obj->display_id,
			       -alphabet => 'dna',
			       -description => "EnsEMBL gene ".\$obj->display_id." with 5 prime padding $five and 3 prime padding $three",
			      );
}
elsif (\$class eq 'Bio::EnsEMBL::Slice'){

  #and stick the sequence into a pseq:
  \$pseq = Bio::PrimarySeq->new(
			       -seq => \$obj->seq,
			       -primary_id => \$obj->id,
			       -alphabet => 'dna',
			      );
}
else {
  die "Don't know what to do with objects of class \$class";
}

#save the PrimarySeq
my \$filename = "[% rome_datafiles_out.BioPrimarySeq.name %]";
nstore \$pseq, \$filename;

