.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::View::Bioseq 3"
.TH Catalyst::View::Bioseq 3 "2008-10-10" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Catalyst::View::Bioseq \- Bioperl Bio::Seq View Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
# use the helper to create your View
    myapp_create.pl view Bioseq Bioseq
.PP
# render view from lib/MyApp.pm or lib/MyApp::C::SomeController.pm
.PP
.Vb 5
\&    sub message : Global {
\&        my ( $self, $c ) = @_;
\&        $c\->stash\->{bioseqview}\->{seq} = $bioseq;
\&        $c\->forward(\(aqMyApp::View::Bioseq\(aq);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the Catalyst view class for Bioperl Bio::Seq objects.
Your application should defined a view class which is a subclass of
this module.  The easiest way to achieve this is using the
\&\fImyapp_create.pl\fR script (where \fImyapp\fR should be replaced with
whatever your application is called).  This script is created as part
of the Catalyst setup.
.PP
.Vb 1
\&    $ script/myapp_create.pl view Bioseq Bioseq
.Ve
.PP
This creates a MyApp::View::Bioseq.pm module in the \fIlib\fR directory (again,
replacing \f(CW\*(C`MyApp\*(C'\fR with the name of your application) which looks
something like this:
.PP
.Vb 1
\&    package FooBar::View::Bioseq;
.Ve
.PP
.Vb 2
\&    use strict;
\&     use base \(aqCatalyst::View::Bioseq\(aq;
.Ve
.PP
.Vb 1
\&    __PACKAGE__\->config\->{DEBUG} = \(aqall\(aq;
.Ve
.PP
Now you can modify your action handlers in the main application and/or
controllers to forward to your view class.  You might choose to do this
in the \fIend()\fR method, for example, to automatically forward all actions
which have \f(CW$c\fR\->stash\->{bioseqview}\->{seq} defined to this view
.PP
# In MyApp::Controller::Root
.PP
.Vb 4
\&  if($c\->stash\->{bioseqview}\->{seq}){
\&      my $view = $c\->stash\->{bioseqview}\->{view} || \(aqMyApp::View::Bioseq\(aq;
\&      $c\->forward($view);
\&  }
.Ve
.PP
By default, output is \s-1PNG\s0. You can, in theory, select anything that \s-1GD\s0 can handle, but
I haven't tested it for anything other than \s-1PNG\s0 yet. Output type can be specified in 
\&\f(CW$c\fR\->stash\->{bioseqview}\->{type}
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.Sh "new"
.IX Subsection "new"
The constructor for the \s-1TT\s0 view. Sets up the template provider, 
and reads the application config.
.Sh "process"
.IX Subsection "process"
Renders the template specified in \f(CW\*(C`$c\->stash\->{template}\*(C'\fR or
\&\f(CW\*(C`$c\->action\*(C'\fR (the private name of the matched action.  Calls render to
perform actual rendering. Output is stored in \f(CW\*(C`$c\->response\->body\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst, Catalyst::Helper::View::Bioseq,
Bio::Seq, Bio::Graphics
.SH "AUTHORS"
.IX Header "AUTHORS"
Caroline Johnston, \f(CW\*(C`johnston@biochem.ucl.ac.uk\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software, you can redistribute it and/or modify it 
under the same terms as Perl itself.
